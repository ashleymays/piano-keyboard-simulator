import { ToneAudioBuffers } from 'tone';

/**
 * Get the audio buffers for the given instrument.
 *
 * @async
 * @param {string} instrumentId - the ID defined in the instruments file
 * @returns {Promise<Map<string, ToneAudioBuffer>>}
 */
export async function getAudioSamples(instrumentId) {
  const response = await fetchAudioSamples(instrumentId);

  if (response.error) {
    throw new Error(response.error);
  }

  const audioBufferContainer = await getToneAudioBuffers(response);
  return audioBufferContainer._buffers;
}

/**
 * Get the audio files from the server.
 *
 * @async
 * @param {string} instrumentId
 * @returns {Promise<object>}
 */
async function fetchAudioSamples(instrumentId) {
  const response = await fetch(
    `http://localhost:8080/audio?instrument=${instrumentId}`
  );
  return response.json();
}

/**
 * Gets the audio buffers generated by Tone.js.
 * Used to avoid writing lots of boilerplate code converting base64 string -> arrayBuffer -> audioBuffer.
 *
 * @param {ToneAudioBuffers} ToneConstructor
 * @param {object} options
 * @returns {Promise<ToneAudioBuffers>}
 */
function getToneAudioBuffers(options) {
  // Wrap the ToneAudioBuffers constructor from Tone.js in a Promise
  return new Promise((resolve, reject) => {
    const audioBuffers = new ToneAudioBuffers(options, (error) =>
      error ? reject(error) : resolve(audioBuffers)
    );
  });
}
