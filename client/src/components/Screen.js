/*
    FILE: Screen.js
    PURPOSE: Render the screen part of the virtual keyboard, update instrument audio information 
            depending on the user's interactions, and display the recordings generated by users
            to be made available for listening and download.
*/

import { useState, useEffect } from "react";
import TabTitle from "./TabTitle";
import TabContent from "./TabContent";
import instruments from "../contents/instruments";

function Screen(props) {
    const [instrument, setInstrument] = useState("Acoustic Grand");
    const [currentTab, setCurrentTab] = useState('Instruments');

    const audioContext = props.audioContext;
    const setBuffers = props.setBuffers;

    // Convert audio for each note for a particular instrument from base64 to arraybuffer format.
    const getAudio = (files) => {
        let audioBuffers = [];
        for (let file in files) {
            let req = new XMLHttpRequest;
            req.open('GET', "data:application/octet;base64," + files[file]);
            req.responseType = 'arraybuffer';
            req.onload = () => {
                let undecodedAudio = req.response;
                audioContext.decodeAudioData(undecodedAudio, (audioFileData) => {
                    // The pitch is equal to the file name without the extension.
                    let pitch = file.slice(0, file.length - 4);
                    audioBuffers[pitch] = audioFileData;
                })
            }
            req.send();
        }
        return audioBuffers;
    }


    // Get instrument audio and update the 'buffers' state to be the array returned 
    // from the 'getAudio' function.
    useEffect(() => {
        fetch("http://localhost:5000/audio", {
            method: 'post',
            headers: new Headers({ 
                "Access-Control-Allow-Origin": "http://localhost:5000",
                "Accept": "application/json", 
                "Content-Type": "application/json",
            }),
            body: JSON.stringify({ instrument: instrument }),
            mode: 'cors'
        })
            .then(res => res.json())
            .then(data => { 
                setBuffers(getAudio(data));
            })
            .catch(err => console.error(err))
    }, [instrument])

    // Array used to display the contents of a particular tab. If the user clicks on the 'Instruments'
    // tab, then the instrument titles and icons are display. Else the titles of the users' recordings
    // are displayed as a numbered list along with options to listen to and download each recording.
    const contentArray = (currentTab === "Instruments") ? instruments : [];

    return (
        <div className="screen">
            <div className="tab-titles">
                <TabTitle currentTab={currentTab} setCurrentTab={setCurrentTab}>Instruments</TabTitle>
                <TabTitle currentTab={currentTab} setCurrentTab={setCurrentTab}>Recordings</TabTitle>
            </div>
            <div className="tab-contents">
                {
                    contentArray.map(item =>
                        <TabContent 
                                key={item.title} 
                                icon={item.icon} 
                                checked={item.title === instrument} 
                                currentTab={currentTab} 
                                onChange={() => setInstrument(item.title)}>
                            {item.title}
                        </TabContent>
                    )
                }
            </div>
        </div>
    )
}

export default Screen;